#!/usr/bin/env ruby

# Copyright (c) 2010, Tapmates s.r.o. (www.tapmates.com). All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use 
# this file except in compliance with the License.
#
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed 
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
# CONDITIONS OF ANY KIND, either express or implied. See the License for the specific 
# language governing permissions and limitations under the License.
#
# Author(s): Petr Kaleta
#
# name: ipaque
# version: 1.0
# description: script for building *.ipa packages
# usage: ./ipaque -h
#        ./ipaque 'project_name' 'source_dir' 'build_dir' 'deploy_dir'

require 'rubygems'
require 'optparse'
require 'zip/zipfilesystem'
require 'plist'

# required gems
gem 'rubyzip'
gem 'plist'

def exit_with_error(message = '')
  STDERR.puts message unless message.empty?
  exit(1) # error
end

USAGE = "USAGE: #{$0} [options]" << "\nUse -h for help"

if ARGV.empty?
  puts USAGE
  exit_with_error
end

options = {}
OptionParser.new do |o|
  o.banner = USAGE
  o.separator ""
  o.separator "Options:"

  o.on("-n", "--name [NAME]",
    "Project name, REQUIRED") do |project_name|
    options[:project_name] = project_name
  end

  o.on("-s", "--source-dir [path]",
    "Path to source directory, REQUIRED") do |source_dir|
    options[:source_dir] = source_dir
  end

  o.on("-b", "--build-dir [path]",
    "Path to build directory, REQUIRED") do |build_dir|
    options[:build_dir] = build_dir
  end

  o.on("-d", "--deploy-dir [path]",
    "Path to deploy directory, REQUIRED") do |deploy_dir|
    options[:deploy_dir] = deploy_dir
  end

  o.on_tail("-h", "--help",
    "Show this message") do
    puts o
    exit
  end
end.parse!

# check if all required params are present and valid
exit_with_error('Project name is required!') if
    options[:project_name].nil? or options[:project_name].empty?
exit_with_error('Source directory is required!') if
    options[:source_dir].nil? or !File.directory?(options[:source_dir])
exit_with_error('Build directory is required!') if
    options[:build_dir].nil? or !File.directory?(options[:build_dir])
exit_with_error('Deploy directory is required!') if
    options[:deploy_dir].nil? or !File.directory?(options[:deploy_dir])

# plist file must be in root of source directory
plist_file = File.join(options[:source_dir], "#{options[:project_name]}-Info.plist")
exit_with_error("No plist file inside source directory!") unless
    File.exist?(plist_file)

# hypothetical path to artwork
artwork_file = File.join(options[:source_dir], 'iTunesArtwork')

begin
  # read version number from plist
  build_version = Plist::parse_xml(plist_file)['CFBundleVersion']
  
  # *.ipa file path
  archive = File.join(options[:deploy_dir], "#{options[:project_name]}-#{build_version}.ipa")

  # create zip archive
  Zip::ZipFile.open(archive, Zip::ZipFile::CREATE) { |zipfile|
    # copy artwork file if exists
    zipfile.add('iTunesArtwork', artwork_file) if File.exist?(artwork_file)
  
    # create payload folder with project folder inside
    zipfile.dir.mkdir("Payload/#{options[:project_name]}.app")
    
    # copy compiled files to payload folder
    Dir["#{options[:build_dir]}/#{options[:project_name]}.app/**/**"].each do |file|
      zipfile.add(
        File.join('Payload', "#{options[:project_name]}.app", file.sub(options[:build_dir], '')),
        file
      )
    end
  }
rescue
  # delete archive if exist
  File.delete(archive) if !archive.nil? and File.exist?(archive)
  
  exit_with_error('Error during ipaqueing, please check your parameters!')
end